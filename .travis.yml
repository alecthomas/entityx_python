sudo: false
language: cpp
compiler:
  - clang
  - gcc
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise
      - llvm-toolchain-precise-3.7
    packages:
      - g++-5
      - clang-3.8

cache:
  apt: true
  directories:
  - $HOME/.ccache
  - "deps/boost-install"
  - "deps/cmake"

language: cpp
compiler:
  - clang
  - gcc

before_install:
  # use sed to replace the SSH URL with the public URL, then init and update submodules
  - sed -i 's/git@github.com:/git:\/\/github.com\//' .gitmodules
  - git submodule update --init --recursive
  - if [ "$CXX" = "g++" ]; then export CXX="g++-5" CC="gcc-5";  g++ --version; fi
  - if [ "$CXX" == "clang++" ]; then export CXX="clang++-3.8" CC="clang-3.8"; clang --version; fi
  - echo $CC

install:
  - DEPS_DIR=${TRAVIS_BUILD_DIR}/deps
  - pushd .
  - cd ${DEPS_DIR}
  - pushd .
  - if [ ! -d "${DEPS_DIR}/cmake/bin/" ]; then export REBUILD_CMAKE="yes"; else export REBUILD_CMAKE="no"; fi
    # Build CMAKE
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [ "$REBUILD_CMAKE" == "yes" ]; then
        rm -rf cmake
        CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
        mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      fi
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew install cmake
    fi
  - which cmake
  - cmake --version
  - popd && pushd .
  # Build Boost
  - cd ${DEPS_DIR}
  - if [ ! -d "${DEPS_DIR}/boost-install/lib" ]; then export REBUILD_BOOST="yes"; else export REBUILD_BOOST="no"; fi
  - |
    if [ "$REBUILD_BOOST" == "yes" ]; then
      rm -rf boost && rm -rf boost-install
      git clone -b boost-1.59.0 --quiet --recursive https://github.com/boostorg/boost.git boost
      cd boost
      chmod +x bootstrap.sh
      ./bootstrap.sh --prefix="$(pwd)/../boost-install"
      ./b2 headers
      # Use gcc as clang has problems building boost
      ./b2 toolset=gcc-5 cxxflags="-std=c++11" --with-filesystem --with-python install -d0
    fi
  - if [ "$REBUILD_BOOST" == "no"  ]; then mkdir boost && cd boost; fi
  - cd ../boost-install && export BOOST_ROOT="$(pwd)"
  - popd

    # Build Entityx
  - cd ${DEPS_DIR}
  - if [ ! -d "${DEPS_DIR}/entityx/lib" ]; then export REBUILD_ENTITYX="yes"; else export REBUILD_ENTITYX="no"; fi
  - |
    if [ "$REBUILD_ENTITYX" == "yes" ]; then
      rm -rf entityx
      git clone -b 1.1.2 --quiet --recursive https://github.com/alecthomas/entityx.git
      cd entityx
      cmake  -DCMAKE_BUILD_TYPE=Debug -DENTITYX_BUILD_TESTING=1
      make VERBOSE=1
      make test || cat Testing/Temporary/LastTest.log
    fi
  - if [ "$REBUILD_ENTITYX" == "no"  ]; then mkdir entityx && cd entityx; fi
  - cd ../entityx && export ENTITYX_ROOT="$(pwd)"
  - popd

  # End script
  - popd

before_script:
  # cd back to build dir before trying to run scripts
  - cd ${TRAVIS_BUILD_DIR}
  - ulimit -c unlimited -S

script:
  - mkdir build && cd build
  - cmake ..  -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX="$(pwd)/install" -DENTITYX_PYTHON_BUILD_TESTING=true -DBOOST_ROOT=$BOOST_ROOT -DENTITYX_ROOT=$ENTITYX_ROOT
  - make VERBOSE=1
  - make test || (cat Testing/Temporary/LastTest.log && exit 1)
